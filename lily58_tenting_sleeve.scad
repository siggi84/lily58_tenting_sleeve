use <MCAD/nuts_and_bolts.scad>;
include <MCAD/units.scad>;

$fa = 1;
$fs = 0.2;

// The inner wall height should be around 11mm if you are building a case. For a 
// tenting sleeve a lower value can be used to make it easy to slide the keyboard
// in and out of the sleeve.

WITH_TENTING=true;
IS_CASE = false; // Adds pcb stand-offs and holes.

inner_wall_height = IS_CASE ? 9.0: 7.0;
LEFT=false;

inner_wall_tolerance = 0.6;

tenting_screw_diameter = M6;
tenting_screw_tolerance = 0.12;
tenting_screw_bolt_diameter = 13;

small_screw_diameter = 2;
mk_sphere = 1.0; mk_cyl = 2.0;
wall_thickness = mk_sphere + mk_cyl;
epsilon = 0.05;

screw_locations = [
    [46.662471999999994, 22.513238],
    [122.86247200000001, 24.713237999999997],
    [46.662471999999994, 60.513237999999994],
    [122.86247200000001, 62.913238],
    [22.062472, 77.71323799999999],
];

base_outline = [
    [0.0, 38.891600000000004],
    [0.0, 32.584667],
    [0.0, 26.277732999999998],
    [0.0, 19.970799999999997],
    [0.0, 13.663867000000003],
    [0.0, 7.356932999999998],
    [0.000681999999997629, 1.0499999999999972],
    [0.021995000000003984, 0.8382530000000017],
    [0.08312899999999956, 0.6410929999999979],
    [0.17988099999999463, 0.462727000000001],
    [0.30804200000000037, 0.3073610000000002],
    [0.4634089999999986, 0.179198999999997],
    [0.6417749999999955, 0.08244799999999941],
    [0.8389339999999947, 0.02131299999999925],
    [11.458516000000003, 0.0],
    [21.866349, 0.0],
    [32.274182999999994, 0.0],
    [42.682017, 0.0],
    [53.089850999999996, 0.0],
    [63.497685000000004, 0.0],
    [73.90551900000001, 0.0],
    [84.31335299999999, 0.0],
    [96.052035, 0.12889200000000045],
    [106.98200999999999, 0.4986120000000014],
    [116.87012600000001, 1.0837259999999986],
    [125.48323, 1.8587989999999976],
    [132.588169, 2.7983970000000014],
    [137.95179100000001, 3.877085000000001],
    [141.34094299999998, 5.069428000000002],
    [142.522472, 6.349992999999998],
    [142.522472, 6.349992999999998],
    [142.522472, 15.831615999999997],
    [142.522472, 25.313238],
    [142.522472, 34.794861000000004],
    [142.522472, 44.276483000000006],
    [142.522472, 53.75810499999999],
    [142.522472, 63.23972800000001],
    [142.522472, 72.72135],
    [142.522471, 82.20297299999999],
    [142.49202400000001, 82.505469],
    [142.40468900000002, 82.787125],
    [142.26647300000002, 83.041934],
    [142.08338400000002, 83.26388600000001],
    [141.86143199999998, 83.44697400000001],
    [141.606624, 83.58519000000001],
    [141.32496700000002, 83.672526],
    [135.75489, 83.70297299999999],
    [130.48730799999998, 83.70297299999999],
    [125.21972699999999, 83.70297299999999],
    [119.95214499999999, 83.70297299999999],
    [114.68456400000001, 83.70297299999999],
    [109.416983, 83.70297299999999],
    [104.149401, 83.70297299999999],
    [98.88181999999999, 83.70297299999999],
    [98.17599600000001, 83.77401599999999],
    [97.51879799999999, 83.977799],
    [96.924245, 84.30030300000001],
    [96.406356, 84.727509],
    [95.97914999999999, 85.245398],
    [95.65664600000001, 85.83995100000001],
    [95.452863, 86.49714900000001],
    [95.38181999999999, 87.20297299999999],
    [95.38181999999999, 87.20297299999999],
    [95.38181999999999, 88.42101299999999],
    [95.38181999999999, 89.63905199999999],
    [95.38181999999999, 90.857092],
    [95.38181999999999, 92.075132],
    [95.38181999999999, 93.293171],
    [95.38181999999999, 94.511211],
    [95.38181999999999, 95.729251],
    [95.38181999999999, 96.92489600000002],
    [95.35137300000001, 97.22739200000001],
    [95.26403699999999, 97.509048],
    [95.12582099999999, 97.763857],
    [94.94273299999999, 97.98580900000002],
    [94.72078, 98.16889800000001],
    [94.46597200000001, 98.30711400000001],
    [94.18431600000001, 98.39444900000001],
    [86.512298, 98.42489600000002],
    [79.14277600000001, 98.42489600000002],
    [71.773254, 98.42489600000002],
    [64.403732, 98.42489600000002],
    [57.03420999999999, 98.42489600000002],
    [49.664688999999996, 98.42489600000002],
    [42.295167000000006, 98.42489600000002],
    [34.925645, 98.42489600000002],
    [33.24909099999999, 99.394022],
    [31.573397, 100.364161],
    [29.897701999999995, 101.33430000000001],
    [28.222008000000002, 102.304439],
    [26.546312999999998, 103.27457800000002],
    [24.870619000000005, 104.24471700000001],
    [23.194924, 105.214855],
    [21.519229999999993, 106.18499400000002],
    [21.351336000000003, 106.27051600000001],
    [21.192678, 106.31770600000002],
    [21.043723999999997, 106.327212],
    [20.904942000000005, 106.29968300000002],
    [20.776799999999994, 106.23577],
    [20.659767000000002, 106.136122],
    [20.554309000000003, 106.00138800000002],
    [20.460897000000003, 105.83221700000001],
    [18.785201999999998, 102.96589700000001],
    [17.109508000000005, 100.09957800000001],
    [15.433813, 97.233258],
    [13.758118999999994, 94.366939],
    [12.082424000000003, 91.500619],
    [10.406729999999996, 88.6343],
    [8.731035000000006, 85.76798],
    [7.0553409999999985, 82.90166099999999],
    [5.354230000000001, 79.231311],
    [3.925577000000004, 75.443908],
    [2.750476000000006, 71.562365],
    [1.8095550000000031, 67.608484],
    [1.083444, 63.604063000000004],
    [0.5527689999999978, 59.570901],
    [0.1981619999999964, 55.530798999999995],
    [0.00024899999999661304, 51.505554999999994],
    [0.0, 51.505467],
    [0.0, 45.198534],
    ];

// Can we find this automatically?
max_x = 142.522472;
max_y = 106.327212;

module base() {
   polygon(base_outline);
}

module extruded_base(height) {
    linear_extrude(height=height)
    base();
}

module ear(height) {
    radius = tenting_screw_bolt_diameter/2 - mk_cyl;
    translate([-tenting_screw_bolt_diameter/2, -radius, 0])
    cube([tenting_screw_bolt_diameter/2, radius*2, height]);
    translate([-tenting_screw_bolt_diameter/2, 0, 0])
    cylinder(h=height, r=radius);
}

ear_loc = [
    [0, 13.758118999999994, 0],
    [13.758118999999994, 94.366939, 0],
    [142.522472, 15.831615999999997, 0],
    [142.522472, 72.72135, 0]
    ];

ear_rot = [
[0, 0, 0],
[0, 0, -30.3112],
[0, 0, 0],
[0, 0, 0]
];

ear_mirror = [
[0, 0, 0],
[0, 0, 0],
[1, 0, 0],
[1, 0, 0]
];

module ears(height) {
    for (i=[0:3]) { 
        translate(ear_loc[i])
        rotate(ear_rot[i])
        mirror(ear_mirror[i])
        ear(height);
    }
}

module bolt_holes() {
    for (i=[0:3]) { 
        translate(ear_loc[i])
        rotate(ear_rot[i])
        mirror(ear_mirror[i])
        translate([-tenting_screw_bolt_diameter/2, 0, inner_wall_height+1])
        mirror([0, 0, 1])
        boltHole(M6, length=2*(inner_wall_height+wall_thickness), tolerance=tenting_screw_tolerance
/* %nutHole(M3, length=60); */
        );
        //cylinder(h=2*(wall_thickness+inner_wall_height), r=tenting_screw_diameter/2, center=true);
    }
}
/* translate([-40, -40, 0]) */
/* %nutHole(M3, length=60); */
/* bolt_holes(); */
/* bolt_holes(); */
// Add Ears

module case_with_ears() {
    extruded_base(inner_wall_height-wall_thickness);
    if (WITH_TENTING)
        ears(inner_wall_height-wall_thickness);
}

// Add thickness with a Minkovski addition
module case_outer(){
    difference() {
        minkowski() {
            case_with_ears();
            cylinder(h=2*mk_cyl, r=mk_cyl, center=true);
        };
        extruded_base(inner_wall_height*2);
    }
}

module small_screws() {
    for (i=[0:4]) { 
        translate(screw_locations[i]) cylinder(r=small_screw_diameter/2, h=2*(wall_thickness+inner_wall_height), center=true);
    }
};

module standoffs() {
    difference(){
        {
            for (i=[0:4]) { 
                translate([0, 0, -epsilon])
                translate(screw_locations[i]) cylinder(r=3, h=3+epsilon);
            }
        }
        small_screws();
    }

};

module finger_hole(){
    translate([85, 42.5, 0])
    cylinder(2*inner_wall_height, 50, center=true);
    };

module full_case() {
    difference() {
        // Add wall thickness and smooth edges with Minkovski addition.
        minkowski() {
            case_outer();
            sphere(r=mk_sphere);
        };

        // Make holes for cables.
        translate([0, -wall_thickness-epsilon, 6])
        cube([27, 2*wall_thickness+2*epsilon, 2*inner_wall_height]);
        
        // Cut interior out again to remove minkowki sphere addition.
        minkowski() {
            extruded_base(inner_wall_height*2);
            cube(inner_wall_tolerance, center=true);
        }
        if (WITH_TENTING) bolt_holes();
        if (IS_CASE) small_screws();
    };
    if (IS_CASE) standoffs();
    
}

if (LEFT)
    full_case();
else
    mirror([1, 0, 0]) full_case();
